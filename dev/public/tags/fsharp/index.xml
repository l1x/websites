<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fsharp on l1x/dev</title><link>https://dev.l1x.be/tags/fsharp/</link><description>Recent content in fsharp on l1x/dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Dec 2020 17:23:21 +0100</lastBuildDate><atom:link href="https://dev.l1x.be/tags/fsharp/index.xml" rel="self" type="application/rss+xml"/><item><title>Compressing AWS S3 logs after getting HackerNewsed</title><link>https://dev.l1x.be/posts/2020/12/20/compressing-aws-s3-logs-after-getting-hackernewsed/</link><pubDate>Sun, 20 Dec 2020 17:23:21 +0100</pubDate><guid>https://dev.l1x.be/posts/2020/12/20/compressing-aws-s3-logs-after-getting-hackernewsed/</guid><description>Abstract One of my previous articles about Firecracker and RPI got posted on HN, and I just realized that many months ago, I enabled logging on the S3 bucket hosting this content. I quickly wanted to peek into the stats, and when I discovered that Athena could not process compressed S3 logs.
I was already working on a larger AWS codebase in F#, so I decided to write a tool that can download the raw logs from S3 and merge all the small files, convert it to Parquet and upload those back.</description></item><item><title>Running ASP.Net web application with Falco on AWS Lambda</title><link>https://dev.l1x.be/posts/2020/12/18/running-asp.net-web-application-with-falco-on-aws-lambda/</link><pubDate>Fri, 18 Dec 2020 13:25:21 +0100</pubDate><guid>https://dev.l1x.be/posts/2020/12/18/running-asp.net-web-application-with-falco-on-aws-lambda/</guid><description>Intro This article has been written by Gabor Gergely (kodfodrasz) as a guest post on this blog. He is the lead engineer of our engineering organization working on F#, AWS and Elm.
We have been using AWS Lambda with F# for a while and have some experience with it. Until now, we opted to use the plain AWS Lambda .Net Runtime provided by Amazon because we value simplicity and code being transparent so we can reason about its operation.</description></item><item><title>CloudClamp</title><link>https://dev.l1x.be/projects/cloudclamp/</link><pubDate>Wed, 13 May 2020 14:31:21 +0200</pubDate><guid>https://dev.l1x.be/projects/cloudclamp/</guid><description>CloudClamp Type safe infrastructure as code with the full power of F#.
Why? I am tired of dealing with configuration files and interpreters that has the expresiveness of Go, safetiness of C and performance of Ruby. Illegal configuration must be made impossible by the type system. ADTs are great for this. Compilation has to check as much as possible and using all language features is a must. C# has libraries for pretty much every single vendor out there or it is trivial to implement the lacking support.</description></item><item><title>Why I chose Fsharp for our AWS Lambda project</title><link>https://dev.l1x.be/posts/2020/05/08/why-i-chose-fsharp-for-our-aws-lambda-project/</link><pubDate>Fri, 08 May 2020 14:31:21 +0200</pubDate><guid>https://dev.l1x.be/posts/2020/05/08/why-i-chose-fsharp-for-our-aws-lambda-project/</guid><description>Why I chose Fsharp for our AWS Lambda project The dilema I wanted to create a simple Lambda function to be able to track how our users use the website and the web application without a 3rd party and a ton of external dependencies, especially avoiding 3rd party Javascript and leaking out data to mass surveillance companies. The easiest way is to use a simple tracking 1x1 pixel or beacon that collects just the right amount of information (strictly non-PII).</description></item></channel></rss>