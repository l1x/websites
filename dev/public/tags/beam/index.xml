<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>beam on l1x/dev</title><link>https://dev.l1x.be/tags/beam/</link><description>Recent content in beam on l1x/dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 May 2020 14:31:21 +0200</lastBuildDate><atom:link href="https://dev.l1x.be/tags/beam/index.xml" rel="self" type="application/rss+xml"/><item><title>Elafi</title><link>https://dev.l1x.be/projects/elafi/</link><pubDate>Tue, 12 May 2020 14:31:21 +0200</pubDate><guid>https://dev.l1x.be/projects/elafi/</guid><description>Elixir Ads Filter (ελάφι) ελάφι
What is this? Elafi is a DNS proxy that filters out unwanted content by returning 0.0.0.0 to the A and ::/0 to AAAA requests that try to resolve ad/spam/malware domains.
In my home network this is roughly 10 - 30% of traffic depending on the part of the day and what devices are active. I find it outrageous that I have to look at ads on a device that I purchased, using my internet connection that I paid for and spend CPU time (producing CO2) to look at completely irrelevant ads, sometimes even malware installers.</description></item><item><title>Matching binary patterns</title><link>https://dev.l1x.be/posts/2020/04/29/matching-binary-patterns/</link><pubDate>Wed, 29 Apr 2020 14:31:21 +0200</pubDate><guid>https://dev.l1x.be/posts/2020/04/29/matching-binary-patterns/</guid><description>Matching binary patterns In Erlang, it is easy to construct binaries and bitstrings and matching binary patterns. I was running into Mitchell Perilstein&amp;rsquo;s excellent work on NTP with Erlang and I thought I am going to use this to explain how bitstrings and binaries work in Erlang.
Two concepts:
A bitstring is a sequence of zero or more bits, where the number of bits does not need to be divisible by 8.</description></item></channel></rss>